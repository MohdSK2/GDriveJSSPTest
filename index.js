!function(){async function e(e,t){return new Promise((i,a)=>{var o=new XMLHttpRequest;if(o.onreadystatechange=function(){try{if(4!==o.readyState)return;if(200!==o.status)throw new Error("FETCH_GET - Failed with status "+o.status);i(o.responseText)}catch(e){console.log(`FETCH_GET - error: ${e}; ResponseText: ${o.responseText}`),a(e)}},o.onerror=function(){throw console.log("FETCH_GET - onError occured"),new Error("FETCH_GET - onError occured")},t){let i="?";for(let e in t){i+=encodeURIComponent(e)+"="+encodeURIComponent(t[e])+"&"}e+=i}console.log("FETCH_GET URL: "+e),o.open("GET",e),o.withCredentials=!0,o.send()})}const t="string",i="boolean",a="dateTime",o="number",r="extendedString",s="list",n="read",d="id",p="filename",l="size",c="URL",m="modifiedDateTime",h="CreatedDateTime",y="ParentId",f="tags",u="File",w="tagName",T="sourceid",N="targetid",g="totrash",D="description",v="getinfo",I="getlist",b="getinfo",S="GetDrives",F="id",E="name",G="id",k="foldername",q="URL",L="modifiedDateTime",R="CreatedDateTime",z="ParentId",C="tags",P="size",J="trashed",O="desc",U="dir",x="mimetype",$={objects:{Drive:{displayName:"Drive",description:"Operations related to a Google (Shared) Drive",properties:{[F]:{displayName:"Drive Id",description:"The ID of this shared drive which is also the ID of the top level folder of this shared drive.",type:t},[E]:{displayName:"Name",description:"The name of this shared drive.",type:t}},methods:{[S]:{displayName:"Get Drives",description:"Get all Google (shared) drives.",type:s,outputs:[F,E]}}},Folder:{displayName:"Folder",description:"Operations related to a folder in Google Drive",properties:{[G]:{displayName:"Id",description:"The unique ID of a folder (or drive).",type:t},[k]:{displayName:"Name",description:"The name of the item.",type:t},[O]:{displayName:"Description",description:"The description of the item.",type:r},[q]:{displayName:"URL",description:"Direct URL to the item.",type:t},[L]:{displayName:"Modified DateTime",description:"Date/Time on which the item was last modified.",type:a},[R]:{displayName:"Created DateTime",description:"Date on which the tiem was created Date",type:a},[z]:{displayName:"Parent ID",description:"ID of the parent object/folder.",type:t},[C]:{displayName:"Tags",description:"JSON of all tags associated with the folder.",type:t},[x]:{displayName:"MimeType",description:"The mimetype of the item.",type:t},[P]:{displayName:"Size",description:"Size of the item in google drive (bytes).",type:o},[J]:{displayName:"Trashed",description:"Weather the item is in the trash or not.",type:i},[U]:{displayName:"Directory",description:"Weather the item is a directory or not.",type:i}},methods:{[b]:{displayName:"Get Info",description:"Get info for the folder by it's ID.",type:n,inputs:[G],requiredInputs:[G],outputs:[G,k,z,C,L,R,q,O,J]},[I]:{displayName:"Get List",description:"Get List of all items in a folder.",type:s,inputs:[G],requiredInputs:[G],outputs:[G,k,O,C,P,J,U,x,L,R,q]}}},File:{displayName:"File",description:"Operations related to a single file in Google Drive",properties:{[d]:{displayName:"File Id",description:"The unique id of the file.",type:t},[p]:{displayName:"File Name",description:"The File Name.",type:t},[c]:{displayName:"URL",description:"Direct URL to the file.",type:t},[u]:{displayName:"File",description:"The content of the file.",type:"attachment"},[l]:{displayName:"File Size",description:"Size of the file in Google Drive in bytes.",type:o},[m]:{displayName:"Modified DateTime",description:"Date/Time on which the file was last modified.",type:a},[h]:{displayName:"Created DateTime",description:"Date on which teh file was created Date",type:a},[y]:{displayName:"Parent ID",description:"ID of the parent object/folder.",type:t},[f]:{displayName:"Tags",description:"JSON of all tags associated with the file.",type:t},[w]:{displayName:"Tag Name",description:"Tag Name",type:t},["tagValue"]:{displayName:"Tag Value",description:"Tag Value",type:t},[T]:{displayName:"Source File Id",description:"The unique Id of the file that should be used as the source of the operation.",type:t},[T]:{displayName:"Target Folder Id",description:"The unique Id of the folder to which the file should be copied/moved/uploaded.",type:t},[g]:{displayName:"Delete to Trash",description:"Indicate if the file should go to the trash folder or be deleted permanently.",type:i},[D]:{displayName:"Descriptioj",description:"File description",type:r}},methods:{[b]:{displayName:"Get Info",description:"Get info for the file by a given ID.",type:n,inputs:[d],requiredInputs:[d],outputs:[d,p,y,f,m,h,c,D,g]},["download"]:{displayName:"Download",type:n,inputs:[d],requiredInputs:[d],outputs:[d,p,y,f,l,m,h,c,u]},["delete"]:{displayName:"Delete File",description:"Delete a file.",type:"delete",inputs:[d,g],requiredInputs:[d],outputs:[]},["upload"]:{displayName:"Upload File",description:"Upload a File",type:"create",inputs:[u,N],requiredInputs:[u,N],outputs:[d,p,y,f,l,m,h,c]}}}}},V="https://www.googleapis.com/drive/v3/drives",j="https://www.googleapis.com/drive/v3/files";async function H(t,i,a){switch(t){case b:await async function(t,i){let a=await e(j+"/"+t[d]+"?fields=*"),o=JSON.parse(a);postResult({[d]:o.id,[p]:o.name,[y]:o.parents[0],[w]:o.mimeType,[m]:o.modifiedTime,[h]:o.createdTime,[g]:o.trashed,[c]:o.exportLinks})}(i);break;default:throw new Error(`The method ${t} is not supported.`)}}async function A(t){switch(t){case S:await async function(){const t=await async function t(i,a=[]){let o={pageToken:i||"",fields:"nextPageToken,drives(id,name)",pageSize:50};const r=await e(V,o),s=JSON.parse(r);a.push(...s.drives);const n=s.nextPageToken;if(n)return await t(n,a);return a.push({name:"My Drive",id:"root"}),a}();postResult(t.map(e=>({[F]:e.id,[E]:e.name})))}();break;default:throw new Error(`The method ${t} is not supported.`)}}const M="application/vnd.google-apps.folder";function _(e){return void 0!==e&&e===M}function B(e){if(void 0!==e&&Array.isArray(e))return e[0]}async function W(t,i,a){switch(t){case I:await async function(t,i){if("string"!=typeof t[G])throw new Error(`properties[${G}] is not of type number`);const a=await function(e){switch(e){case!0:case"true":case 1:case"1":case"on":case"yes":return!0;default:return!1}}(i.ShowTrashed),o=t[G],r=await async function t(i,a,o,r=[]){let s={pageToken:o||"",fields:"nextPageToken,files(id,name,description,properties,size,trashed,mimeType,modifiedTime,createdTime,webViewLink)",q:`'${i}' in parents`,pageSize:5,supportsAllDrives:!0,includeItemsFromAllDrives:!0};a||(s.q=s.q+" and trashed = false");const n=await e(j,s),d=JSON.parse(n);r.push(...d.files);const p=d.nextPageToken;if(p)return await t(i,a,p,r);return r}(o,a);postResult(r.map(e=>({[G]:e.id,[k]:e.name,[O]:e.description?e.description:"",[C]:JSON.stringify(e.properties),[P]:e.size?e.size:0,[J]:e.trashed,[U]:_(e.mimeType),[x]:e.mimeType,[L]:new Date(e.modifiedTime),[R]:new Date(e.createdTime),[q]:e.webViewLink})))}(i,a);break;case v:await async function(t){if("string"!=typeof t[G])throw new Error(`properties[${G}] is not of type number`);const i=t[G],a=await async function(t){const i=j+"/"+t,a=await e(i,{fields:"id,name,description,properties,trashed,mimeType,modifiedTime,createdTime,webViewLink,parents",supportsAllDrives:!0}),o=JSON.parse(a);if(!_(o.mimeType))throw new Error(`Item with ID '${t}' is not a folder. It's of type: ${o.mimeType}`);return o}(i);postResult({[G]:a.id,[k]:a.name,[z]:B(a.parents),[C]:JSON.stringify(a.properties),[L]:new Date(a.modifiedTime),[R]:new Date(a.createdTime),[q]:a.webViewLink,[O]:a.description?a.description:"",[J]:a.trashed})}(i);break;default:throw new Error(`The method ${t} is not supported.`)}}metadata={systemName:"googledriveJSSPbroker",displayName:"Google Drive JSSP Broker",description:"JSSP Broker to utilize Google Drive functionality.",configuration:{ShowTrashed:{displayName:"Show trashed items in return set.",type:"boolean",value:"false",required:!0}}},ondescribe=async function({configuration:e}){postSchema($)},onexecute=async function({objectName:e,methodName:t,parameters:i,properties:a,configuration:o,schema:r}){switch(e){case"File":await H(t,a);break;case"Drive":await A(t);break;case"Folder":await W(t,a,o);break;default:throw new Error("The object "+e+" is not supported.")}}}();
//# sourceMappingURL=index.js.map
