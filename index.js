"use strict";var e,o=(e=require("ava"))&&"object"==typeof e&&"default"in e?e.default:e;require("@k2oss/k2-broker-core/test-framework");var t=require("./fetch"),r=require("./ServiceObjects");require("./index");var s=require("./helpers"),i=require("./GoogleMimeTypes");function a(e,o){global[e]=o}let d=null;a("postResult",(function(e){d=e}));let n=null;a("XMLHttpRequest",class{constructor(){n=this.recorder={},this.recorder.headers={}}open(e,o){this.recorder.opened={method:e,url:o}}setRequestHeader(e,o){this.recorder.headers[e]=o}send(e){const o=require("request");this.withCredentials&&this.setRequestHeader("Authorization","Bearer ya29.A0AfH6SMCwDpW21IQQEGwP-hrfsLp7KNzwCVNd2tIXEWvuOC5YAQcakLw3mTUWPs3UNqfN-Df_TmEoxZznWZMppuUI2I7BMoYz-wXho_1suCDWnIoeyk40aQS8gzNWbM0TJBTK5rGMKNmBb77k1XG6DDpgHChXl1e7sLDZeUecIiY");const t={method:this.recorder.opened.method,url:this.recorder.opened.url,headers:this.recorder.headers,body:e,strictSSL:!1};console.log("URL: "+t.method+" "+t.url);try{o(t,(e,o,t)=>{if(e)return console.log("error inside request:"),console.log(e),void this.onerror();this.responseText=t,this.readyState=4,this.status=o.statusCode,this.onreadystatechange(),delete this.responseText})}catch(e){console.log("error ouside request "+e)}}}),o("fetch_get - Succesful result against online TODO's",async e=>{let o=await t.fetch_get("https://jsonplaceholder.typicode.com/todos/198"),r=JSON.parse(o);e.plan(3),e.is(r.id,198),e.is(r.userId,10),e.is(r.title,"quis eius est sint explicabo")}),o("fetch_get - 404 failure",async e=>t.fetch_get("https://google.com/404").then(o=>{e.fail()}).catch(o=>{e.pass(),console.log(o)})),o("Helper -> getBoolean",async e=>{e.is(s.getBoolean(1),!0),e.is(s.getBoolean("yes"),!0),e.is(s.getBoolean("true"),!0),e.is(s.getBoolean("1"),!0),e.is(s.getBoolean(0),!1),e.is(s.getBoolean("0"),!1)}),o("Helper -> isFolder",async e=>{e.is(s.isFolder(void 0),!1),e.is(s.isFolder(i.MimeTypes.GoogleDriveFolder),!0),e.is(s.isFolder(i.MimeTypes.GoogleDriveFile),!1)}),o("Describe returns the hardcoded instance",async e=>{let o=null;a("postSchema",(function(e){o=e})),await Promise.resolve(ondescribe({configuration:{}})),e.deepEqual(o,r.ServiceObjectDefinitions),e.pass()}),o("ServiceObject not supported",async e=>{let o=await e.throwsAsync(Promise.resolve(onexecute({objectName:"K2rocks",methodName:"unused",parameters:{},properties:{},configuration:{},schema:{}})));e.deepEqual(o.message,"The object K2rocks is not supported."),e.pass()}),o("Service Object method not supported",async e=>{let o=await e.throwsAsync(Promise.resolve(onexecute({objectName:"File",methodName:"SomeMethod",parameters:{},properties:{},configuration:{},schema:{}})));e.deepEqual(o.message,"The method SomeMethod is not supported."),o=await e.throwsAsync(Promise.resolve(onexecute({objectName:"Drive",methodName:"SomeMethod",parameters:{},properties:{},configuration:{},schema:{}}))),e.deepEqual(o.message,"The method SomeMethod is not supported."),o=await e.throwsAsync(Promise.resolve(onexecute({objectName:"Folder",methodName:"SomeMethod",parameters:{},properties:{},configuration:{},schema:{}}))),e.deepEqual(o.message,"The method SomeMethod is not supported."),e.pass()}),o("Execute Drive -> GetDrives",async e=>{await onexecute({objectName:"Drive",methodName:"GetDrives",parameters:void 0,properties:void 0,configuration:void 0,schema:void 0}),e.plan(2),e.assert(d.length>=1),e.assert(void 0!==d.find(e=>"root"==e.id))}),o("Execute Folder -> GetList",async e=>{await onexecute({objectName:"Folder",methodName:"getlist",parameters:void 0,properties:{id:"root"},configuration:{ShowTrashed:!1},schema:void 0}),e.assert(d.length>=1),e.assert("string"==typeof d[0].tags),e.assert(void 0===d.find(e=>1==e.trashed)),d=null,await onexecute({objectName:"Folder",methodName:"getlist",parameters:void 0,properties:{id:"root"},configuration:{ShowTrashed:!0},schema:void 0}),e.assert(d.length>=1),e.assert("string"==typeof d[0].tags),e.assert(void 0!==d.find(e=>1==e.trashed))}),o("Execute Folder -> GetList on shared drive",async e=>{await onexecute({objectName:"Drive",methodName:"GetDrives",parameters:void 0,properties:void 0,configuration:void 0,schema:void 0});var o=d.find(e=>"root"!=e.id);void 0===o&&e.fail("You need to create a shared Drive for this test to work."),await onexecute({objectName:"Folder",methodName:"getlist",parameters:void 0,properties:{id:o.id},configuration:{ShowTrashed:!0},schema:void 0}),e.assert(d.length>=1)}),o("Execute Folder -> GetInfo - root",async e=>{await onexecute({objectName:"Folder",methodName:"getinfo",parameters:void 0,properties:{id:"root"},configuration:void 0,schema:void 0}),e.is(d.foldername,"My Drive"),e.is(d.ParentId,void 0),e.is(d.trashed,!1)}),o("Execute Folder -> GetInfo - folder within root",async e=>{await onexecute({objectName:"Folder",methodName:"getinfo",parameters:void 0,properties:{id:"root"},configuration:void 0,schema:void 0});const o=d.id;await onexecute({objectName:"Folder",methodName:"getlist",parameters:void 0,properties:{id:o},configuration:{ShowTrashed:!1},schema:void 0});var t=d.find(e=>1==e.dir);await onexecute({objectName:"Folder",methodName:"getinfo",parameters:void 0,properties:{id:t.id},configuration:void 0,schema:void 0}),e.is(d.ParentId,o),e.is(d.trashed,!1)}),o("Execute Folder -> GetInfo - try file within root",async e=>{await onexecute({objectName:"Folder",methodName:"getinfo",parameters:void 0,properties:{id:"root"},configuration:void 0,schema:void 0});const o=d.id;await onexecute({objectName:"Folder",methodName:"getlist",parameters:void 0,properties:{id:o},configuration:{ShowTrashed:!1},schema:void 0});var t=d.find(e=>0==e.dir);let r=await e.throwsAsync(Promise.resolve(onexecute({objectName:"Folder",methodName:"getinfo",parameters:void 0,properties:{id:t.id},configuration:void 0,schema:void 0})));e.assert(r.message.startsWith(`Item with ID '${t.id}' is not a folder. It's of type:`))});
//# sourceMappingURL=test.js.map
